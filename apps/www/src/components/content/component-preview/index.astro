---
import fs from "node:fs/promises"
import { CopyButton } from "@/components/copy-button"
import { type ResolveOptions, resolvePath } from "mlly"
import CodeWrapper from "../code-wrapper.astro"
import { FrameworkSwitcher } from "./framework-switcher"
import NotFound from "./not-found.astro"
import Preview from "./preview"
import PreviewVue from "./preview.vue"
import Tabs from "./tabs"

interface Props {
  component: string
  name: string
}
const { component, name } = Astro.props

const resolvePathAndReadFile = async (id: string, options: ResolveOptions) => {
  try {
    const filePath = await resolvePath(id, options)
    return fs.readFile(filePath, "utf-8")
  } catch (error) {
    console.log("error", error)
    return false
  }
}

const source = await resolvePathAndReadFile(`@ui/react/examples/${name}`, {
  conditions: ["source"],
})
const sourceVue = await resolvePathAndReadFile(`@ui/vue/examples/${name}`, {
  conditions: ["source"],
})
---

<div class="group relative my-4 flex flex-col space-y-2">
  <Tabs client:visible>
    <div slot="preview" class="relative rounded-md border">
      <div class="flex items-center justify-between p-4">
        <FrameworkSwitcher client:load />
        <!-- FIXME: framework copy code -->
        <CopyButton
          client:visible
          value={source || ""}
          variant="outline"
          className="h-7 w-7 text-foreground opacity-100 hover:bg-muted hover:text-foreground [&_svg]:h-3.5 [&_svg]:w-3.5"
        />
      </div>
      <div
        class="preview flex min-h-[350px] w-full items-center justify-center p-10"
        data-framework="react"
      >
        {
          source ? (
            <Preview
              client:visible
              name={name}
            />
          ) : (
            <NotFound component={name} />
          )
        }
      </div>
      <div
        class="preview flex min-h-[350px] w-full items-center justify-center p-10"
        hidden
        data-framework="vue"
      >
        {
          sourceVue ? (
            <PreviewVue
              client:visible
              name={name}
            />
          ) : (
            <NotFound component={name} />
          )
        }
      </div>
    </div>
    <Fragment slot="code">
      <div data-framework="react">
        <CodeWrapper lang="tsx" src={source || ""} />
      </div>
      <div data-framework="vue" hidden>
        <CodeWrapper lang="vue" src={sourceVue || ""} />
      </div>
    </Fragment>
  </Tabs>
</div>

<script>
  import { $framework } from "@/atoms/framework";

  let unsubscribe: () => void;

  document.addEventListener("astro:page-load", () => {
    const previewReact = document.querySelectorAll(`[data-framework="react"]`);
    const previewVue = document.querySelectorAll(`[data-framework="vue"]`);

    if (typeof unsubscribe === "function") {
      unsubscribe();
    }

    unsubscribe = $framework.subscribe((value) => {
      previewReact.forEach((el) => {
        // @ts-ignore
        el.hidden = value !== "react";
      });
      previewVue.forEach((el) => {
        // @ts-ignore
        el.hidden = value !== "vue";
      });
    });
  });
</script>
