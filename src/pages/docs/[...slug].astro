---
import Layout from "@/layouts/layout.astro"
import type { GetStaticPaths } from "astro"
import { getCollection } from "astro:content"
import { ChevronRightIcon } from "lucide-react"

import { getCollectionEntrySlug, getDocsSidebarGroup } from "@/lib/docs"
import { cn } from "@/lib/utils"
import { MDXComponents } from "@/components/content"

import "@/styles/mdx.css"

export const getStaticPaths = (async () => {
  const overview = await getCollection("overview")
  const components = await getCollection("components")

  return [...overview, ...components].map((entry) => ({
    params: { slug: getCollectionEntrySlug(entry) },
    props: { entry },
  }))
}) satisfies GetStaticPaths

const sidebarGroup = await getDocsSidebarGroup()

const pathname = Astro.url.pathname
const { entry } = Astro.props
const { Content, headings } = await entry.render()
---

<Layout>
  <div
    class="container md:grid md:grid-cols-[220px_minmax(0,1fr)] md:gap-6 lg:grid-cols-[240px_minmax(0,1fr)] lg:gap-10"
  >
    <aside
      class="fixed top-14 z-30 -ml-2 hidden h-[calc(100vh-3.5rem)] w-full shrink-0 md:sticky md:block"
    >
      <div class="relative overflow-y-auto h-full py-6 pr-6 lg:py-8">
        <div class="w-full">
          {
            sidebarGroup.map((group) => (
              <div class="pb-4">
                <h4 class="mb-1 px-2 py-1 text-sm font-semibold">
                  {group.title}
                </h4>
                <div class="flex flex-col text-sm">
                  {group.items.map((item) => (
                    <a
                      href={item.href}
                      class={cn(
                        "hover:underline px-2 py-1",
                        pathname === item.href
                          ? "font-medium text-foreground"
                          : "text-muted-foreground"
                      )}
                    >
                      {item.title}
                    </a>
                  ))}
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </aside>
    <main
      class="relative py-6 lg:gap-10 lg:py-8 xl:grid xl:grid-cols-[1fr_300px]"
    >
      <div class="mx-auto w-full min-w-0">
        <div
          class="mb-4 flex items-center space-x-1 text-sm leading-none text-muted-foreground"
        >
          <div class="truncate">Docs</div>
          <ChevronRightIcon className="h-3.5 w-3.5" />
          <div class="text-foreground">{entry.data.title}</div>
        </div>
        <div class="space-y-2">
          <h1 class={cn("scroll-m-20 text-3xl font-bold tracking-tight")}>
            {entry.data.title}
          </h1>
          {
            entry.data.description && (
              <p class="text-base text-muted-foreground">
                {entry.data.description}
              </p>
            )
          }
        </div>
        <div class="pt-8 pb-12" id="content-container">
          <Content components={MDXComponents} />
        </div>
      </div>
      <div class="hidden text-sm xl:block">
        <div class="sticky top-16 -mt-10 h-[calc(100vh-3.5rem)] py-12">
          <div class="space-y-4">
            <p class="font-medium">On This Page</p>
            <ul class="space-y-2" id="toc">
              {
                headings.map((heading) => (
                  <li>
                    <a
                      href={`#${heading.slug}`}
                      data-id={heading.slug}
                      data-depth={heading.depth}
                      class={cn(
                        "inline-block no-underline transition-colors hover:text-foreground text-muted-foreground data-[active]:font-medium data-[active]:text-foreground"
                      )}
                      style={{ paddingLeft: `${heading.depth - 2}rem` }}
                    >
                      {heading.text}
                    </a>
                  </li>
                ))
              }
            </ul>
          </div>
        </div>
      </div>
    </main>
  </div>
</Layout>

<script is:inline>
  const toc = document.getElementById("toc")

  let activeId = null
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && entry.target.id) {
          if (activeId) {
            toc
              .querySelector(`li > a[data-id="${activeId}"]`)
              .removeAttribute("data-active")
          }
          activeId = entry.target.id
          toc
            .querySelector(`[data-id="${activeId}"]`)
            .setAttribute("data-active", "")
        }
      })
    },
    { rootMargin: `0% 0% -80% 0%` }
  )

  const contentContainer = document.getElementById("content-container")
  contentContainer.querySelectorAll("h2, h3, h4").forEach((heading) => {
    observer.observe(heading)
  })
</script>
